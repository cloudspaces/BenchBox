extends layout

block css
    link(rel='stylesheet', href='/stylesheets/style.css')

    // style libs bootstrap
    link(rel='stylesheet', href='css/style.css')

    // BOOTSTRAP
    link(rel='stylesheet', href='css/bootstrap.min.css')
    link(rel='stylesheet', href='css/bootstrap-theme.min.css')
    link(rel='stylesheet', href='css/bootstrap-table.css')

    // graphene
    // link(rel='stylesheet', href='css/graphene.min.css')



block js
    // ANGULAR
    // script(src='js/angular.min.js')
    script(src='https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.js')
    // script(src='js/angular-route.min.js')
    script(src='https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular-route.js')
    script(src='https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular-resource.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js')
    // BOOTSTRAP
    script(src='js/bootstrap.min.js')
    script(src='js/bootstrap-table-all.js')

    // NOTIFYJS
    script(src='js/notify.js')


    // GRAPHITE
    script(src='js/jquery.graphite.js')
    //script(src='js/d3.js')
    //script(src='js/backbone.js')
    //script(src='js/underscore.js')
    // script(src='js/graphene.min.js')

    // CUSTOM
    script(src='js/init.js')


    // STATIC
    script(src='js/config.js')


block template
    // TEMPLATES
    script(id='/hosts.html' type="text/ng-template").
        Search: <input type='text' ng-model='search.name'>
        <ul>
        <li ng-repeat="host in hosts | filter: search">
        <input type="checkbox" ng-model="host.completed">
        <a href="#/{{$index}}">{{host.name}}</a>
        </li>
        </ul>

block content
    .container.fullheight#container
        // id (#)
        h1= title
        if session.cookie !== undefined
            p session found #{session.cookie.httpOnly}
        else
            p no session
        //
            .header.clearfix
                nav
                    ul.nav.nav-pills.pull-right
                        li.active(role="presentation")
                            a Home

        .row
            .col-md-2
                h4 ConfigTabs
            .col-md-8
                ul.nav.nav-pills
                    li
                        a(data-toggle='pill' href='#configManager') Manager
                    li
                        a(data-toggle='pill' href='#configSyncServer') SyncServer
                    li
                        a(data-toggle='pill' href='#configLogServer') LogServer
                    li.active
                        a(data-toggle='pill' href='#configHosts') Hosts
                    li
                        a(data-toggle='pill' href='#configProfile') Profile
                    li
                        a(data-toggle='pill' href='#configMonitor') Monitor
                    li
                        a(data-toggle='pill' href='#configConsole') Console
            .col-md-2
                a.btn.btn-success.btn-block(href='/load') Load Default
        hr
        .row.tab-content.frame-fixed-size
            #configManager.tab-pane.fade

                .row.col-md-12
                    .col-md-2
                        p Manager
                    .col-md-6
                        input.bb-config.form-control#manager-ip(type='text' placeholder='manager.ip' value='localhost' )
                    .col-md-2
                        input.bb-config.form-control#manager-port(type='text' placeholder='manager.port' value='4242' )
                    .col-md-2
                        button.btn.btn-primary.btn-block(onclick="testConnection($('#manager-ip').val(),$('#manager-port').val())") Test Connect
                .row.col-md-12
                    .col-md-2
                        p Install new Manager
                    .col-md-2
                        form(method='get' action='/manager.py')
                            button.btn.btn-info.btn-block(type='submit') Download!
                    .col-md-2
                        input.form-control(type='text' value='run: python manager.py')
                    .col-md-2
                        input.form-control(type='text' value='stop: CTRL + C')
                    .col-md-4
                        button.btn.btn-warning.btn-block AutoRun!

            #configSyncServer.tab-pane.fade
                .row.col-md-12
                    .col-md-2
                        p StackSyncServer
                    .col-md-4
                        input.bb-config.form-control#stacksync-ip(type='text' placeholder='ss.stacksync.ip' value='#{session.config.ss.stacksync.ip}')
                    .col-md-4
                        input.bb-config.form-control#stacksync-port(type='text' placeholder='ss.stacksync.port' value='#{session.config.ss.stacksync.port}')
                    .col-md-2
                        button.btn.btn-primary.btn-block(onclick="testConnection($('#stacksync-ip').val(),$('#stacksync-port').val())") Test Connect
                .row.col-md-12
                    .col-md-2
                        p OwnCloudServer
                    .col-md-4
                        input.bb-config.form-control#owncloud-ip(type='text' placeholder='ss.owncloud.ip' value='#{session.config.ss.owncloud.ip}')
                    .col-md-4
                        input.bb-config.form-control#owncloud-port(type='text' placeholder='ss.owncloud.port' value='#{session.config.ss.owncloud.port}')
                    .col-md-2
                        button.btn.btn-primary.btn-block(onclick="testConnection($('#owncloud-ip').val(),$('#owncloud-port').val())") Test Connect

            #configLogServer.tab-pane.fade
                .row.col-md-12
                    .col-md-2
                        p Graphite
                    .col-md-4
                        input.bb-config.form-control#graphite-ip(type='text' placeholder='ls.graphite.ip' value='#{session.config.ls.graphite.ip}')
                    .col-md-4
                        input.bb-config.form-control#graphite-port(type='text' placeholder='ls.graphite.port' value='#{session.config.ls.graphite.port}')
                    .col-md-2
                        button.btn.btn-primary.btn-block(onclick="testConnection($('#graphite-ip').val(),$('#graphite-port').val())") Test Connect
                .row.col-md-12
                    .col-md-2
                        p Impala
                    .col-md-4
                        input.bb-config.form-control#impala-ip(type='text' placeholder='ls.impala.ip' value='#{session.config.ls.impala.ip}')
                    .col-md-4
                        input.bb-config.form-control#impala-port(type='text' placeholder='ls.impala.port' value='#{session.config.ls.impala.port}')
                    .col-md-2
                        button.btn.btn-primary.btn-block(onclick="testConnection($('#impala-ip').val(),$('#impala-port').val())") Test Connect


            #configMonitor.tab-pane.fade
                .col-md-2
                    h4 Monitor
                .col-md-10
                    //
                        .row
                            .col-md-2
                                p graphana
                            .col-md-4
                                input.form-control#grafana-ip(type='text' placeholder='ls.grafana.ip' value='#{session.config.ls.grafana.ip}')
                            .col-md-4
                                input.form-control#grafana-port(type='text' placeholder='ls.grafana.port' value='#{session.config.ls.grafana.port}')
                            .col-md-2
                                button.btn.btn-primary.btn-block(onclick="testConnection($('#grafana-ip').val(),$('#grafana-port').val())") Test Connect
                    .row
                        .col-md-2
                            p Select graph:
                        .col-md-10
                            ul.nav.nav-pills
                                li.active
                                    a(data-toggle='pill' href='#graphXXX') XXX
                                li
                                    a(data-toggle='pill' href='#graphCPU') CPU
                                li
                                    a(data-toggle='pill' href='#graphRAM') RAM
                                li
                                    a(data-toggle='pill' href='#graphNET') NET
                                li
                                    a(data-toggle='pill' href='#graphNET') Cubism
                                    // http://square.github.io/cubism/
                                li
                                    a(data-toggle='pill' href='#graphNET') Giraphe
                                    // https://github.com/kenhub/giraffe
                                    // http://xor.lonnen.com/graphite.js/

                            hr
                            .row.tab-content
                                #graphXXX.tab-pane.fade.in.active
                                    .col-md-12
                                        #includedContent
                                        // img.img-responsive.center-block#monitorXXX(alt='xxxMonitor')

                                        script(type='text/javascript').
                                            console.log('Testing graphene')
                                            /*
                                            $(function () {
                                                $("#includedContent").load("/example/index.html");
                                            });
                                            */



                                #graphCPU.tab-pane.fade
                                    .col-md-12
                                        img.img-responsive.center-block#monitorCPU(alt='cpuMonitor')
                                    // (src='https://ast03:8443/render/?width=586&height=308&target=carbon.agents.vagrant-ubuntu-trusty-64-1.cpuUsage')

                                #graphRAM.tab-pane.fade
                                    .col-md-12
                                        img.img-responsive.center-block#monitorRAM(alt='ramMonitor')
                                    // (src='https://ast03:8443/render/?width=586&height=308&target=carbon.agents.vagrant-ubuntu-trusty-64-1.memUsage')

                                #graphNET.tab-pane.fade
                                    .col-md-12
                                        img.img-responsive.center-block#monitorNET(alt='netMonitor')
                                    //(src='https://ast03:8443/render/?width=586&height=308&target=carbon.agents.vagrant-ubuntu-trusty-64-1.pointsPerUpdate&target=carbon.agents.vagrant-ubuntu-trusty-64-1.updateOperations')
                            hr
                            .row.tab-content
                                #btnFixImage.btn.btn-danger Fix Image https 501 Error.


            #configHosts.tab-pane.fade.in.active
                .col-md-12
                    div(ng-app="app")
                        ng-view


            #configProfile.tab-pane.fade
                .col-md-2
                    h4 Profile
                .col-md-2
                    input.bb-config.form-control#profile-sync(type='text' placeholder='sync' value='#{session.config.profile.sync}')
                .col-md-2
                    input.bb-config.form-control#profile-regular(type='text' placeholder='regular' value='#{session.config.profile.regular}')
                .col-md-2
                    input.bb-config.form-control#profile-cdn(type='text' placeholder='cdn' value='#{session.config.profile.cdn}')
                .col-md-2
                    input.bb-config.form-control#profile-backup(type='text' placeholder='backup' value='#{session.config.profile.backup}')
                .col-md-2
                    input.bb-config.form-control#profile-idle(type='text' placeholder='idle' value='#{session.config.profile.idle}')

            #configConsole.tab-pane.fade

                .col-md-2
                    h4 Console
                .col-md-10
                    .row
                        .col-md-3
                            .btn.btn-primary.btn-block#btnHello hello
                        .col-md-3
                            .btn.btn-info.btn-block#btnGoodbye goodbye
                        .col-md-3
                            .btn.btn-warning.btn-block#btnStart start
                        .col-md-3
                            .btn.btn-danger.btn-block#btnList list

                    .row.logger
                        .col-md-12
                            textarea.form-control.font-mono-size#loggerFrame(disabled rows='20' style='font-size: x-small')
                    .row
                        .col-md-10
                            input.form-control#inputCmd(type='text' placeholder='cmd' value='ls -l')
                        .col-md-2
                            button.btn.btn-primary.btn-block#btnCmd Submit

        hr
        footer.footer
            p © AST 2015

        script(type='text/javascript').
            angular.module('app', ['ngRoute', 'ngResource'])

                //---------------
                // Services
                //---------------
                    .directive('img-stream', function () {
                        return {
                            restrict: 'A',
                            link: function (scope, element, attrs) {
                                element.bind('load', function () {
                                    console.log("Image is loaded");
                                });
                            }
                        };
                    })



                //---------------
                // Factory
                //---------------

                    .factory('Hosts', ['$resource', function ($resource) {
                        // quin api rest utilitzar???
                        return $resource('/hosts/:id', null, {
                            'update': {
                                method: 'PUT'
                            }
                        });
                    }])
                //---------------
                // Controllers
                //---------------


                // notify
                    // .controller('ConnectionNotify', [])



                // hostDetails.html
                    .controller('HostDetailCtrl', ['$scope', '$routeParams', 'Hosts', '$location', function ($scope,
                                                                                                             $routeParams, Hosts, $location) {
                        $scope.host = Hosts.get({id: $routeParams.id});

                        $scope.update = function () {
                            Hosts.update({id: $scope.host._id}, $scope.host, function () {
                                $location.url('/');
                            });
                        };
                        $scope.remove = function () {
                            Hosts.remove({id: $scope.host._id}, function () {
                                $location.url('/');
                            });
                        };
                    }])

                // hosts.html
                    .controller('HostController', ['$scope', 'Hosts', function ($scope, Hosts) {
                        // default test settings
                        $scope.run = {
                            testOps: 10,
                            testItv: 1,
                            testProfile: 'sync',
                            testFolder: 'stacksync_folder',
                            testClient: 'StackSync'
                        };



                        // controller actions
                        $scope.editing = []; //  variable
                        $scope.checkedAll = false;
                        // Invocar manager de hosts
                        $scope.hosts = Hosts.query(); // llistat de tots els hosts

                        $scope.saveHost = function () {
                            console.log('SaveHosts');
                            console.log($scope);
                            /*
                             if (!$scope.newHostHostname || $scope.newHostHostname.length < 1) return;
                             if (!$scope.newHostIp || $scope.newHostIp.length < 1) return;
                             if (!$scope.newHostLogging || $scope.newHostLogging.length < 1) return;
                             */
                            var host = new Hosts({
                                hostname: $scope.newHostHostname,
                                ip: $scope.newHostIp,
                                logging: $scope.newHostLogging
                            });
                            host.$save(function () {
                                $scope.hosts.push(host);
                                $scope.newHostHostname = ''; // clear textbox
                                $scope.newHostIp = ''; // clear textbox
                                $scope.newHostLogging = ''; // clear textbox
                            });
                            console.log(host);
                            console.log($scope.hosts);
                        };

                        $scope.save = function () {
                            if (!$scope.newHost || $scope.newHost.length < 1) return;
                            var host = new Hosts({name: $scope.newHost, completed: false});
                            host.$save(function () {
                                $scope.hosts.push(host);
                                $scope.newHost = ''; // clear textbox
                            });
                        };
                        $scope.update = function (index) {
                            var host = $scope.hosts[index];
                            Hosts.update({id: host._id}, host);
                            $scope.editing[index] = false;
                        };
                        $scope.ping = function (index) {
                            var host = $scope.hosts[index];
                            console.log(host)
                            testConnection(host.ip, 22); // port ssh
                            /*
                             Hosts.update({id: host._id}, host);
                             $scope.editing[index] = false;
                             */
                        };
                        $scope.rpc = function (index, cmd) {
                            var host = $scope.hosts[index];
                            console.log(host)
                            rpcHost(host, cmd); // port ssh
                            /*
                             Hosts.update({id: host._id}, host);
                             $scope.editing[index] = false;
                             */
                        };

                        $scope.checkAll = function (name) {

                            $scope.checkedAll = !$scope.checkedAll;
                            // console.log($scope.checkedAll );
                            $('.' + name).each(function () {
                                console.log(this);
                                // (this).prop('checked', $scope.checkedAll);
                                if ($(this).prop('checked') !== $scope.checkedAll)
                                    $(this).trigger('click');

                            });
                        };

                        $scope.runTest = function () {
                            console.log($scope.hosts.length);
                            var test = $scope.run;

                            var hosts = $scope.hosts.filter(function (item) {
                                console.log(item);
                                if (item.test)
                                    return item;
                            });
                            console.log(hosts.length);
                            if (hosts.length === 0)
                                $.notify('Warning!, No host checked', 'warn');
                            else
                                $.notify('Request rpcTest forwarded!', 'info');
                            console.log('Hosts!!!');
                            rpcTest(hosts, test);

                        };

                        $scope.edit = function (index) {
                            $scope.editing[index] = angular.copy($scope.hosts[index]);
                        };
                        $scope.cancel = function (index) {
                            $scope.hosts[index] = angular.copy($scope.editing[index]);
                            $scope.editing[index] = false;
                        };
                        $scope.remove = function (index) {
                            var host = $scope.hosts[index];
                            Hosts.remove({id: host._id}, function () {
                                $scope.hosts.splice(index, 1);
                            });
                        };
                    }])
                //---------------
                // Routes
                //---------------
                    .config(['$routeProvider', function ($routeProvider) {
                        $routeProvider
                                .when('/', { // quan accedeixo al root de home es criden aquests controladors
                                    templateUrl: 'html/hosts.html',
                                    controller: 'HostController'
                                })
                                .when('/:id', { // si especifico amb un id es crida aquest
                                    templateUrl: 'html/hostDetails.html',
                                    controller: 'HostDetailCtrl'
                                });
                    }]);
            console.log("Home Script loaded");

        script(type='text/javascript').
            GLOBAL_VAR = null
            console.log("button controller");

            $('#btnHello').click(
                    function () {
                        console.log("Say hello");
                        $.get('http://localhost:3000/rpc/hello', {}, function (data) {
                            console.log("success hello");
                            console.log(JSON.stringify({data: data}));
                        });
                        console.log("Fin hello");
                    });


            $('#btnCmd').click(
                    function () {

                        console.log("Run cmd");

                        $.get('http://localhost:3000/rpc/cmd',
                                {cmd: $('#inputCmd').val()},
                                function (data) {
                                    console.log("success hello!!!!!!!!!!!!!!!!!!!!!!!!!!");
                                    writeToLogger('loggerFrame', data);

                                });
                        console.log("Success, run cmd!");
                    });

            $('#btnStart').click(
                    function () {
                        console.log("Run start");
                        $.ajax({
                            url: 'http://localhost:3000/rpc/start',
                            type: 'GET',
                            success: function () {
                                console.log("Success, run start!");
                            },
                            error: function () {

                            }
                        });
                    });

            $('#btnGoodbye').click(
                    function () {
                        console.log("Say goodbye");
                        $.ajax({
                            url: 'http://localhost:3000/rpc/goodbye',
                            type: 'GET',
                            success: function () {
                                console.log("Success, say goodbye!");
                            }
                        });
                    });

            $('#btnList').click(
                    function () {
                        console.log("Get list");
                        $.ajax({
                            url: 'http://localhost:3000/rpc/list',
                            type: 'GET',
                            success: function (data) {
                                console.log("Success, say list!");
                                console.log(data);
                                writeToLogger('loggerFrame', data);
                            }
                        });
                    });

            writeToLogger = function (loggerID, lines) {
                data = lines;
                // clear logger content
                $('#' + loggerID).val('');
                lines = JSON.parse(data.result);

                // publish new data
                console.log(lines);
                console.log("Show");
                lines.forEach(function (line, idx) {
                    console.log(line);
                    if (line !== '')
                        $('#' + loggerID).val($('#' + loggerID).val() + line + '\n');
                });
                $('#' + loggerID).scrollTop($('#' + loggerID)[0].scrollHeight);
                    //for(line in lines)
                       // console.log(lines[line]);
                        // $('#loggerFrame').val($('#loggerFrame').val() + line);

            };


            testConnection = function (ip, port, cb) {
                console.log('PING ---->', ip, port);
                // if i dont need to use the failure  function they recommend me to use post or get
                console.log("Get list");
                $.ajax({
                    url: 'http://localhost:3000/rpc/nmap',
                    contentType: "application/json; charset=utf-8",
                    data: {data: ip + ' ' + port},
                    dataType: 'json',
                    type: 'GET',
                    success: function (data) {
                        console.log('pc, Result:');
                        console.log(data);
                        // console.log(JSON.parse(JSON.stringify(data)));
                        console.log('...');

                        if (JSON.parse(data.result)) {
                            $.notify('Success! ping(' + ip + ':' + port + ')', 'success');
                        } else {
                            $.notify('Warning! ping(' + ip + ':' + port + ')', 'warn');
                        }

                        // $.notify('Hello','info');

                    },
                    error: function (err) {
                        console.log(err);
                        console.log('pc, Error ping(' + ip + ':' + port + ')', err);
                        $.notify('Error! ' + err, 'error ');
                    }
                });
            };

            // cmd should be an object
            rpcHost = function (host, cmd, cb) {

                var args = {
                    ip: host.ip,
                    hostname: host.hostname,
                    login: host.logging,
                    profile: host.profile,
                    cred_stacksync: host.cred_stacksync,
                    cred_owncloud: host.cred_owncloud,
                    cmd: cmd
                };
                console.log(args);
                console.log(args);
                appendAllParams(args, 'bb-config');
                appendAllHosts(args, 'bb-hosts');
                $.ajax({
                    url: 'http://localhost:3000/rpc/rpc',
                    data: args,
                    timeout: 6000000, // 6000s ::100min
                    type: 'GET',
                    success: function (data) {
                        console.log("Success, run start!");
                        console.log(JSON.stringify(data));
                        $.notify('Success! ' + host.hostname + ' ' + cmd, 'success');
                    },
                    error: function (err) {
                        console.log(err)
                        console.log('pc, Error ' + host + ' ' + cmd + ' ', err);
                        $.notify('Error! ' + err, 'error');
                    }
                });
            };


            rpcTest = function (hosts, test, cb) {
                console.log("RunTests ");
                console.log("Hosts: ", hosts);
                console.log("Test: ", test);


                hosts.forEach(function (host) {

                    console.log(host);
                    console.log('->');
                    console.log(test);

                    var cmd = 'test';

                    var args = {
                        ip: host.ip,
                        hostname: host.hostname,
                        login: host.logging,
                        profile: host.profile,
                        cred_stacksync: host.cred_stacksync,
                        cred_owncloud: host.cred_owncloud,
                        cmd: 'test',
                        test: test
                    };

                    $.ajax({
                        url: 'http://localhost:3000/rpc/rpc',
                        data: args,
                        timeout: 6000000, // 6000s ::100min
                        type: 'GET',
                        success: function (data) {
                            console.log("Success, run test! " + (test));
                            console.log(JSON.stringify(data));
                            $.notify('Success! ' + host.hostname + ' ' + cmd, 'success');
                        },
                        error: function (err) {
                            console.log(err)
                            console.log('pc, Error ' + host + ' ' + cmd + ' ', err);
                            $.notify('Error! ' + err, 'error');
                        }
                    });


                    // './executor.py -o 20 -p sync -t 1 -f stacksync_folder -x StackSync'

                });


            };

            appendAllParams = function (target, className) {
                $('.' + className).each(function () {
                    target[$(this).attr("id")] = ($(this).attr('value'));
                });
            };

            appendAllHosts = function (target, className) {
                target.hosts = {};
                $('.' + className).each(function () {

                    target.hosts[$(this).find('p.host-name').text()] = {
                        ip: $(this).find('p.host-ip').text(),
                        login: $(this).find('p.host-login').text()

                    };
                // $(this).find('p.host-name');

                    console.log(target.hosts);
                });

                GLOBAL_VAR = target;
            };


            notifyButtonById = function (btnId) {
              // self
            };


            $.fn.graphite.defaults.url = "https://10.30.103.95:8443/renderer/";
            $.fn.graphite.defaults.width = "450";
            $.fn.graphite.defaults.height = "300";

            try {
                $('#monitorCPU').graphite({
               // url: "http://myserver/render/",
                    from: "-1d",
                    target: [
                        "carbon.agents.vagrant-ubuntu-trusty-64-1.memUsage"
                    ],
                    title: "CPUMonitor"
                });
                $('#monitorXXX').graphite({
               // url: "http://myserver/render/",
                    from: "-1hours",
                    target: [
                        "carbon.agents.vagrant-ubuntu-trusty-64-1.cpuUsage"
                    ],
                    title: "XXXMonitor"
                });


                $('#monitorRAM').graphite({
               // url: "http://myserver/render/",
                    from: "-1hours",
                    target: [
                        "carbon.agents.vagrant-ubuntu-trusty-64-1.memUsage"
                    ],
                    title: "RamMonitor"
                });

                $('#monitorNET').graphite({
               // url: "http://myserver/render/",
                    from: "-1hours",
                    colorList: 'red,green',
                    target: [
                        "alias(carbon.agents.vagrant-ubuntu-trusty-64-1.pointsPerUpdate, 'pointsPerUpdate')",
                        "alias(carbon.agents.vagrant-ubuntu-trusty-64-1.updateOperations, 'updateOps')"
                    ],
                    title: "NetworkMonitor"
                });
            } catch (err) {
                console.warn('Error happened', JSON.stringify(err));
            }

            $('#btnFixImage').click(function () {
                console.log("btnFixImage")
                function openNewBackgroundTab(url) {
                    var a = document.createElement("a");
                    a.href = url;
                    var evt = document.createEvent("MouseEvents");

                    //the tenth parameter of initMouseEvent sets ctrl key
                    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0,
                            true, false, false, false, 0, null);
                    a.dispatchEvent(evt);
                }

                var url = prompt("Please enter graphite: [ip:port]", "10.30.103.95:8443");
                if (url != null) {
                    console.log('Dispatch openNewWindow')
                    openNewBackgroundTab('https://' + url + '/renderer/?from=-1d&height=300&until=now&width=450&target=carbon.agents.vagrant-ubuntu-trusty-64-1.memUsage&title=CPUMonitor&_t=0.013591398485004902');
                    // alert('Accept certificate and refresh page!')
                }

            });


            console.log(GLOBAL_VAR);

            // TODO refresh onclick